// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: CIM.Group.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 群成员变更类型
enum CIM_Group_CIMGroupMemberChangedType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 无含义，无需处理。兼容性
  case kCimGroupMemberChangedTypeDefault // = 0

  /// 加入
  case kCimGroupMemberChangedTypeAdd // = 1

  /// 移除
  case kCimGroupMemberChangedTypeDel // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .kCimGroupMemberChangedTypeDefault
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .kCimGroupMemberChangedTypeDefault
    case 1: self = .kCimGroupMemberChangedTypeAdd
    case 2: self = .kCimGroupMemberChangedTypeDel
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .kCimGroupMemberChangedTypeDefault: return 0
    case .kCimGroupMemberChangedTypeAdd: return 1
    case .kCimGroupMemberChangedTypeDel: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension CIM_Group_CIMGroupMemberChangedType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [CIM_Group_CIMGroupMemberChangedType] = [
    .kCimGroupMemberChangedTypeDefault,
    .kCimGroupMemberChangedTypeAdd,
    .kCimGroupMemberChangedTypeDel,
  ]
}

#endif  // swift(>=4.2)

/// 群组类型
enum CIM_Group_CIMGroupType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case kCimGroupTypeUnknown // = 0

  /// 普通群（200人）
  case kCimGroupTypeGroupNormal // = 1

  /// 超级群（2000人）
  case kCimGroupTypeGroupSuper // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .kCimGroupTypeUnknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .kCimGroupTypeUnknown
    case 1: self = .kCimGroupTypeGroupNormal
    case 2: self = .kCimGroupTypeGroupSuper
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .kCimGroupTypeUnknown: return 0
    case .kCimGroupTypeGroupNormal: return 1
    case .kCimGroupTypeGroupSuper: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension CIM_Group_CIMGroupType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [CIM_Group_CIMGroupType] = [
    .kCimGroupTypeUnknown,
    .kCimGroupTypeGroupNormal,
    .kCimGroupTypeGroupSuper,
  ]
}

#endif  // swift(>=4.2)

/// 加群模式
enum CIM_Group_CIMGroupJoinModel: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 所有人可邀请别人加入
  case kCimGroupJoinModelDefault // = 0

  /// 需要管理员验证
  case kCimGroupJoinModelNeedAuth // = 1

  /// 拒绝所有人
  case kCimGroupJoinModelReject // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .kCimGroupJoinModelDefault
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .kCimGroupJoinModelDefault
    case 1: self = .kCimGroupJoinModelNeedAuth
    case 2: self = .kCimGroupJoinModelReject
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .kCimGroupJoinModelDefault: return 0
    case .kCimGroupJoinModelNeedAuth: return 1
    case .kCimGroupJoinModelReject: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension CIM_Group_CIMGroupJoinModel: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [CIM_Group_CIMGroupJoinModel] = [
    .kCimGroupJoinModelDefault,
    .kCimGroupJoinModelNeedAuth,
    .kCimGroupJoinModelReject,
  ]
}

#endif  // swift(>=4.2)

/// 被邀请人同意方式
enum CIM_Group_CIMGroupBeInviteMode: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 不需要同意
  case kCimGroupBeInviteModelDefault // = 0

  /// 需要同意
  case kCimGroupBeInviteModelNeedAgree // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .kCimGroupBeInviteModelDefault
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .kCimGroupBeInviteModelDefault
    case 1: self = .kCimGroupBeInviteModelNeedAgree
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .kCimGroupBeInviteModelDefault: return 0
    case .kCimGroupBeInviteModelNeedAgree: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension CIM_Group_CIMGroupBeInviteMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [CIM_Group_CIMGroupBeInviteMode] = [
    .kCimGroupBeInviteModelDefault,
    .kCimGroupBeInviteModelNeedAgree,
  ]
}

#endif  // swift(>=4.2)

/// 禁言方式
enum CIM_Group_CIMGroupMuteModel: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 不禁言
  case kCimGroupMuteModelDefault // = 0

  /// 全体禁言
  case kCimGroupMuteModelAll // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .kCimGroupMuteModelDefault
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .kCimGroupMuteModelDefault
    case 1: self = .kCimGroupMuteModelAll
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .kCimGroupMuteModelDefault: return 0
    case .kCimGroupMuteModelAll: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension CIM_Group_CIMGroupMuteModel: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [CIM_Group_CIMGroupMuteModel] = [
    .kCimGroupMuteModelDefault,
    .kCimGroupMuteModelAll,
  ]
}

#endif  // swift(>=4.2)

/// 创建讨论组群请求（类似微信）：
/// 1.无需对方同意
/// 2.群成员可邀请任何人进群
/// 3.创建人默认为群主，群主可转让，群主退出默认随机一个成员自动成为群主
/// 4.只有群主可修改群公告，踢人
struct CIM_Group_CIMGroupCreateReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id: 		0x501
  var userID: UInt64 = 0

  /// 群名，不指定则由服务端生成
  var groupName: String = String()

  /// 群成员列表
  var memberIDList: [UInt64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 群组创建响应
struct CIM_Group_CIMGroupCreateRsp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id: 		0x502
  var userID: UInt64 = 0

  var resultCode: UInt32 = 0

  /// 群信息
  var groupInfo: CIM_Group_CIMGroupInfo {
    get {return _groupInfo ?? CIM_Group_CIMGroupInfo()}
    set {_groupInfo = newValue}
  }
  /// Returns true if `groupInfo` has been explicitly set.
  var hasGroupInfo: Bool {return self._groupInfo != nil}
  /// Clears the value of `groupInfo`. Subsequent reads from it will return its default value.
  mutating func clearGroupInfo() {self._groupInfo = nil}

  /// 群成员列表
  var memberIDList: [UInt64] = []

  /// 群创建系统通知，需要广播
  var attachNotificatinoMsg: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _groupInfo: CIM_Group_CIMGroupInfo? = nil
}

/// 解散群请求
struct CIM_Group_CIMGroupDisbandingReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id: 		0x503
  var userID: UInt64 = 0

  var groupID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CIM_Group_CIMGroupDisbandingRsp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id: 		0x504
  var userID: UInt64 = 0

  var groupID: UInt64 = 0

  var resultCode: UInt32 = 0

  /// 群解散系统通知，需要广播
  var attachNotificatinoMsg: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 退出群
struct CIM_Group_CIMGroupExitReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id: 		0x505
  var userID: UInt64 = 0

  var groupID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 退出群
struct CIM_Group_CIMGroupExitRsp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id: 		0x506
  var userID: UInt64 = 0

  var groupID: UInt64 = 0

  var resultCode: UInt32 = 0

  /// 群成员退出群系统通知，需要广播
  var attachNotificatinoMsg: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 查询群列表请求
struct CIM_Group_CIMGroupListReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id: 		0x507
  var userID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 查询群列表响应
struct CIM_Group_CIMGroupListRsp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id: 		0x508
  var userID: UInt64 = 0

  var groupVersionList: [CIM_Group_CIMGroupVersionInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 查询群信息请求
struct CIM_Group_CIMGroupInfoReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id: 		0x509
  var userID: UInt64 = 0

  var groupVersionList: [CIM_Group_CIMGroupVersionInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 查询群信息响应
struct CIM_Group_CIMGroupInfoRsp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id: 		0x510
  var userID: UInt64 = 0

  var resultCode: UInt32 = 0

  var groupInfoList: [CIM_Group_CIMGroupInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 邀请人入群请求
struct CIM_Group_CIMGroupInviteMemberReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id: 		0x511
  var userID: UInt64 = 0

  var groupID: UInt64 = 0

  /// 成员ID列表
  var memberIDList: [UInt64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 邀请人入群响应
struct CIM_Group_CIMGroupInviteMemberRsp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id: 		0x512
  var userID: UInt64 = 0

  var groupID: UInt64 = 0

  var resultCode: UInt32 = 0

  /// 入群系统通知，需要广播
  var attachNotificatinoMsg: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 踢人请求
struct CIM_Group_CIMGroupKickOutMemberReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id: 		0x513
  var userID: UInt64 = 0

  var groupID: UInt64 = 0

  /// 成员ID列表
  var memberIDList: [UInt64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 踢人响应
struct CIM_Group_CIMGroupKickOutMemberRsp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id: 		0x514
  var userID: UInt64 = 0

  var groupID: UInt64 = 0

  var resultCode: UInt32 = 0

  /// 踢人系统通知，需要广播
  var attachNotificatinoMsg: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 查询群成员列表
struct CIM_Group_CIMGroupMemberListReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id: 		0x516
  var userID: UInt64 = 0

  var groupID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CIM_Group_CIMGroupMemberListRsp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id: 		0x517
  var userID: UInt64 = 0

  var groupID: UInt64 = 0

  /// 成员ID列表
  var memberIDList: [UInt64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 群成员变更通知
struct CIM_Group_CIMGroupMemberChangedNotify {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id: 		0x515
  var userID: UInt64 = 0

  var groupID: UInt64 = 0

  var changedList: [CIM_Group_CIMGroupMemberChangedInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 变更详情
struct CIM_Group_CIMGroupMemberChangedInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: UInt64 = 0

  var type: CIM_Group_CIMGroupMemberChangedType = .kCimGroupMemberChangedTypeDefault

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 群组信息
struct CIM_Group_CIMGroupInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 群组ID
  var groupID: UInt64 = 0

  /// 群组名称(最大128字符)
  var groupName: String = String()

  /// 群类型
  var groupType: CIM_Group_CIMGroupType = .kCimGroupTypeUnknown

  /// 入群模式
  var joinModel: CIM_Group_CIMGroupJoinModel = .kCimGroupJoinModelDefault

  /// 被邀请人同意方式
  var beInviteModel: CIM_Group_CIMGroupBeInviteMode = .kCimGroupBeInviteModelDefault

  /// 禁言模式
  var muteModel: CIM_Group_CIMGroupMuteModel = .kCimGroupMuteModelDefault

  /// 群主
  var groupOwnerID: UInt64 = 0

  /// 创建时间
  var createTime: UInt32 = 0

  /// 群信息更新时间
  var updateTime: UInt32 = 0

  /// 群介绍，别人搜索入群的时候显示
  var groupIntro: String = String()

  /// 群公告
  var announcement: String = String()

  /// 群头像
  var groupAvatar: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 群版本信息
struct CIM_Group_CIMGroupVersionInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var groupID: UInt64 = 0

  var groupVersion: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "CIM.Group"

extension CIM_Group_CIMGroupMemberChangedType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kCIM_GROUP_MEMBER_CHANGED_TYPE_DEFAULT"),
    1: .same(proto: "kCIM_GROUP_MEMBER_CHANGED_TYPE_ADD"),
    2: .same(proto: "kCIM_GROUP_MEMBER_CHANGED_TYPE_DEL"),
  ]
}

extension CIM_Group_CIMGroupType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kCIM_GROUP_TYPE_UNKNOWN"),
    1: .same(proto: "kCIM_GROUP_TYPE_GROUP_NORMAL"),
    2: .same(proto: "kCIM_GROUP_TYPE_GROUP_SUPER"),
  ]
}

extension CIM_Group_CIMGroupJoinModel: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kCIM_GROUP_JOIN_MODEL_DEFAULT"),
    1: .same(proto: "kCIM_GROUP_JOIN_MODEL_NEED_AUTH"),
    2: .same(proto: "kCIM_GROUP_JOIN_MODEL_REJECT"),
  ]
}

extension CIM_Group_CIMGroupBeInviteMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kCIM_GROUP_BE_INVITE_MODEL_DEFAULT"),
    1: .same(proto: "kCIM_GROUP_BE_INVITE_MODEL_NEED_AGREE"),
  ]
}

extension CIM_Group_CIMGroupMuteModel: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "kCIM_GROUP_MUTE_MODEL_DEFAULT"),
    1: .same(proto: "kCIM_GROUP_MUTE_MODEL_ALL"),
  ]
}

extension CIM_Group_CIMGroupCreateReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMGroupCreateReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "group_name"),
    3: .standard(proto: "member_id_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeSingularStringField(value: &self.groupName)
      case 3: try decoder.decodeRepeatedUInt64Field(value: &self.memberIDList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if !self.groupName.isEmpty {
      try visitor.visitSingularStringField(value: self.groupName, fieldNumber: 2)
    }
    if !self.memberIDList.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.memberIDList, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Group_CIMGroupCreateReq, rhs: CIM_Group_CIMGroupCreateReq) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.groupName != rhs.groupName {return false}
    if lhs.memberIDList != rhs.memberIDList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Group_CIMGroupCreateRsp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMGroupCreateRsp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "result_code"),
    3: .standard(proto: "group_info"),
    4: .standard(proto: "member_id_list"),
    10: .standard(proto: "attach_notificatino_msg"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.resultCode)
      case 3: try decoder.decodeSingularMessageField(value: &self._groupInfo)
      case 4: try decoder.decodeRepeatedUInt64Field(value: &self.memberIDList)
      case 10: try decoder.decodeSingularBytesField(value: &self.attachNotificatinoMsg)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if self.resultCode != 0 {
      try visitor.visitSingularUInt32Field(value: self.resultCode, fieldNumber: 2)
    }
    if let v = self._groupInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.memberIDList.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.memberIDList, fieldNumber: 4)
    }
    if !self.attachNotificatinoMsg.isEmpty {
      try visitor.visitSingularBytesField(value: self.attachNotificatinoMsg, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Group_CIMGroupCreateRsp, rhs: CIM_Group_CIMGroupCreateRsp) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.resultCode != rhs.resultCode {return false}
    if lhs._groupInfo != rhs._groupInfo {return false}
    if lhs.memberIDList != rhs.memberIDList {return false}
    if lhs.attachNotificatinoMsg != rhs.attachNotificatinoMsg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Group_CIMGroupDisbandingReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMGroupDisbandingReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "group_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.groupID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if self.groupID != 0 {
      try visitor.visitSingularUInt64Field(value: self.groupID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Group_CIMGroupDisbandingReq, rhs: CIM_Group_CIMGroupDisbandingReq) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Group_CIMGroupDisbandingRsp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMGroupDisbandingRsp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "group_id"),
    3: .standard(proto: "result_code"),
    10: .standard(proto: "attach_notificatino_msg"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.groupID)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.resultCode)
      case 10: try decoder.decodeSingularBytesField(value: &self.attachNotificatinoMsg)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if self.groupID != 0 {
      try visitor.visitSingularUInt64Field(value: self.groupID, fieldNumber: 2)
    }
    if self.resultCode != 0 {
      try visitor.visitSingularUInt32Field(value: self.resultCode, fieldNumber: 3)
    }
    if !self.attachNotificatinoMsg.isEmpty {
      try visitor.visitSingularBytesField(value: self.attachNotificatinoMsg, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Group_CIMGroupDisbandingRsp, rhs: CIM_Group_CIMGroupDisbandingRsp) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.resultCode != rhs.resultCode {return false}
    if lhs.attachNotificatinoMsg != rhs.attachNotificatinoMsg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Group_CIMGroupExitReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMGroupExitReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "group_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.groupID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if self.groupID != 0 {
      try visitor.visitSingularUInt64Field(value: self.groupID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Group_CIMGroupExitReq, rhs: CIM_Group_CIMGroupExitReq) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Group_CIMGroupExitRsp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMGroupExitRsp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "group_id"),
    3: .standard(proto: "result_code"),
    10: .standard(proto: "attach_notificatino_msg"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.groupID)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.resultCode)
      case 10: try decoder.decodeSingularBytesField(value: &self.attachNotificatinoMsg)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if self.groupID != 0 {
      try visitor.visitSingularUInt64Field(value: self.groupID, fieldNumber: 2)
    }
    if self.resultCode != 0 {
      try visitor.visitSingularUInt32Field(value: self.resultCode, fieldNumber: 3)
    }
    if !self.attachNotificatinoMsg.isEmpty {
      try visitor.visitSingularBytesField(value: self.attachNotificatinoMsg, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Group_CIMGroupExitRsp, rhs: CIM_Group_CIMGroupExitRsp) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.resultCode != rhs.resultCode {return false}
    if lhs.attachNotificatinoMsg != rhs.attachNotificatinoMsg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Group_CIMGroupListReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMGroupListReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Group_CIMGroupListReq, rhs: CIM_Group_CIMGroupListReq) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Group_CIMGroupListRsp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMGroupListRsp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "group_version_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.groupVersionList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if !self.groupVersionList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.groupVersionList, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Group_CIMGroupListRsp, rhs: CIM_Group_CIMGroupListRsp) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.groupVersionList != rhs.groupVersionList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Group_CIMGroupInfoReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMGroupInfoReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "group_version_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.groupVersionList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if !self.groupVersionList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.groupVersionList, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Group_CIMGroupInfoReq, rhs: CIM_Group_CIMGroupInfoReq) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.groupVersionList != rhs.groupVersionList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Group_CIMGroupInfoRsp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMGroupInfoRsp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "result_code"),
    3: .standard(proto: "group_info_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.resultCode)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.groupInfoList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if self.resultCode != 0 {
      try visitor.visitSingularUInt32Field(value: self.resultCode, fieldNumber: 2)
    }
    if !self.groupInfoList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.groupInfoList, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Group_CIMGroupInfoRsp, rhs: CIM_Group_CIMGroupInfoRsp) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.resultCode != rhs.resultCode {return false}
    if lhs.groupInfoList != rhs.groupInfoList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Group_CIMGroupInviteMemberReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMGroupInviteMemberReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "group_id"),
    3: .standard(proto: "member_id_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.groupID)
      case 3: try decoder.decodeRepeatedUInt64Field(value: &self.memberIDList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if self.groupID != 0 {
      try visitor.visitSingularUInt64Field(value: self.groupID, fieldNumber: 2)
    }
    if !self.memberIDList.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.memberIDList, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Group_CIMGroupInviteMemberReq, rhs: CIM_Group_CIMGroupInviteMemberReq) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.memberIDList != rhs.memberIDList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Group_CIMGroupInviteMemberRsp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMGroupInviteMemberRsp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "group_id"),
    3: .standard(proto: "result_code"),
    10: .standard(proto: "attach_notificatino_msg"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.groupID)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.resultCode)
      case 10: try decoder.decodeSingularBytesField(value: &self.attachNotificatinoMsg)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if self.groupID != 0 {
      try visitor.visitSingularUInt64Field(value: self.groupID, fieldNumber: 2)
    }
    if self.resultCode != 0 {
      try visitor.visitSingularUInt32Field(value: self.resultCode, fieldNumber: 3)
    }
    if !self.attachNotificatinoMsg.isEmpty {
      try visitor.visitSingularBytesField(value: self.attachNotificatinoMsg, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Group_CIMGroupInviteMemberRsp, rhs: CIM_Group_CIMGroupInviteMemberRsp) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.resultCode != rhs.resultCode {return false}
    if lhs.attachNotificatinoMsg != rhs.attachNotificatinoMsg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Group_CIMGroupKickOutMemberReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMGroupKickOutMemberReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "group_id"),
    3: .standard(proto: "member_id_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.groupID)
      case 3: try decoder.decodeRepeatedUInt64Field(value: &self.memberIDList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if self.groupID != 0 {
      try visitor.visitSingularUInt64Field(value: self.groupID, fieldNumber: 2)
    }
    if !self.memberIDList.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.memberIDList, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Group_CIMGroupKickOutMemberReq, rhs: CIM_Group_CIMGroupKickOutMemberReq) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.memberIDList != rhs.memberIDList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Group_CIMGroupKickOutMemberRsp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMGroupKickOutMemberRsp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "group_id"),
    3: .standard(proto: "result_code"),
    10: .standard(proto: "attach_notificatino_msg"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.groupID)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.resultCode)
      case 10: try decoder.decodeSingularBytesField(value: &self.attachNotificatinoMsg)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if self.groupID != 0 {
      try visitor.visitSingularUInt64Field(value: self.groupID, fieldNumber: 2)
    }
    if self.resultCode != 0 {
      try visitor.visitSingularUInt32Field(value: self.resultCode, fieldNumber: 3)
    }
    if !self.attachNotificatinoMsg.isEmpty {
      try visitor.visitSingularBytesField(value: self.attachNotificatinoMsg, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Group_CIMGroupKickOutMemberRsp, rhs: CIM_Group_CIMGroupKickOutMemberRsp) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.resultCode != rhs.resultCode {return false}
    if lhs.attachNotificatinoMsg != rhs.attachNotificatinoMsg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Group_CIMGroupMemberListReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMGroupMemberListReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "group_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.groupID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if self.groupID != 0 {
      try visitor.visitSingularUInt64Field(value: self.groupID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Group_CIMGroupMemberListReq, rhs: CIM_Group_CIMGroupMemberListReq) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Group_CIMGroupMemberListRsp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMGroupMemberListRsp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "group_id"),
    3: .standard(proto: "member_id_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.groupID)
      case 3: try decoder.decodeRepeatedUInt64Field(value: &self.memberIDList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if self.groupID != 0 {
      try visitor.visitSingularUInt64Field(value: self.groupID, fieldNumber: 2)
    }
    if !self.memberIDList.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.memberIDList, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Group_CIMGroupMemberListRsp, rhs: CIM_Group_CIMGroupMemberListRsp) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.memberIDList != rhs.memberIDList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Group_CIMGroupMemberChangedNotify: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMGroupMemberChangedNotify"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "group_id"),
    3: .standard(proto: "changed_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.groupID)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.changedList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if self.groupID != 0 {
      try visitor.visitSingularUInt64Field(value: self.groupID, fieldNumber: 2)
    }
    if !self.changedList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.changedList, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Group_CIMGroupMemberChangedNotify, rhs: CIM_Group_CIMGroupMemberChangedNotify) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.changedList != rhs.changedList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Group_CIMGroupMemberChangedInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMGroupMemberChangedInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeSingularEnumField(value: &self.type)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if self.type != .kCimGroupMemberChangedTypeDefault {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Group_CIMGroupMemberChangedInfo, rhs: CIM_Group_CIMGroupMemberChangedInfo) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Group_CIMGroupInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMGroupInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .standard(proto: "group_name"),
    3: .standard(proto: "group_type"),
    4: .standard(proto: "join_model"),
    5: .standard(proto: "be_invite_model"),
    6: .standard(proto: "mute_model"),
    7: .standard(proto: "group_owner_id"),
    8: .standard(proto: "create_time"),
    9: .standard(proto: "update_time"),
    10: .standard(proto: "group_intro"),
    11: .same(proto: "announcement"),
    12: .standard(proto: "group_avatar"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.groupID)
      case 2: try decoder.decodeSingularStringField(value: &self.groupName)
      case 3: try decoder.decodeSingularEnumField(value: &self.groupType)
      case 4: try decoder.decodeSingularEnumField(value: &self.joinModel)
      case 5: try decoder.decodeSingularEnumField(value: &self.beInviteModel)
      case 6: try decoder.decodeSingularEnumField(value: &self.muteModel)
      case 7: try decoder.decodeSingularUInt64Field(value: &self.groupOwnerID)
      case 8: try decoder.decodeSingularUInt32Field(value: &self.createTime)
      case 9: try decoder.decodeSingularUInt32Field(value: &self.updateTime)
      case 10: try decoder.decodeSingularStringField(value: &self.groupIntro)
      case 11: try decoder.decodeSingularStringField(value: &self.announcement)
      case 12: try decoder.decodeSingularStringField(value: &self.groupAvatar)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupID != 0 {
      try visitor.visitSingularUInt64Field(value: self.groupID, fieldNumber: 1)
    }
    if !self.groupName.isEmpty {
      try visitor.visitSingularStringField(value: self.groupName, fieldNumber: 2)
    }
    if self.groupType != .kCimGroupTypeUnknown {
      try visitor.visitSingularEnumField(value: self.groupType, fieldNumber: 3)
    }
    if self.joinModel != .kCimGroupJoinModelDefault {
      try visitor.visitSingularEnumField(value: self.joinModel, fieldNumber: 4)
    }
    if self.beInviteModel != .kCimGroupBeInviteModelDefault {
      try visitor.visitSingularEnumField(value: self.beInviteModel, fieldNumber: 5)
    }
    if self.muteModel != .kCimGroupMuteModelDefault {
      try visitor.visitSingularEnumField(value: self.muteModel, fieldNumber: 6)
    }
    if self.groupOwnerID != 0 {
      try visitor.visitSingularUInt64Field(value: self.groupOwnerID, fieldNumber: 7)
    }
    if self.createTime != 0 {
      try visitor.visitSingularUInt32Field(value: self.createTime, fieldNumber: 8)
    }
    if self.updateTime != 0 {
      try visitor.visitSingularUInt32Field(value: self.updateTime, fieldNumber: 9)
    }
    if !self.groupIntro.isEmpty {
      try visitor.visitSingularStringField(value: self.groupIntro, fieldNumber: 10)
    }
    if !self.announcement.isEmpty {
      try visitor.visitSingularStringField(value: self.announcement, fieldNumber: 11)
    }
    if !self.groupAvatar.isEmpty {
      try visitor.visitSingularStringField(value: self.groupAvatar, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Group_CIMGroupInfo, rhs: CIM_Group_CIMGroupInfo) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.groupName != rhs.groupName {return false}
    if lhs.groupType != rhs.groupType {return false}
    if lhs.joinModel != rhs.joinModel {return false}
    if lhs.beInviteModel != rhs.beInviteModel {return false}
    if lhs.muteModel != rhs.muteModel {return false}
    if lhs.groupOwnerID != rhs.groupOwnerID {return false}
    if lhs.createTime != rhs.createTime {return false}
    if lhs.updateTime != rhs.updateTime {return false}
    if lhs.groupIntro != rhs.groupIntro {return false}
    if lhs.announcement != rhs.announcement {return false}
    if lhs.groupAvatar != rhs.groupAvatar {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Group_CIMGroupVersionInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMGroupVersionInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .standard(proto: "group_version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.groupID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.groupVersion)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupID != 0 {
      try visitor.visitSingularUInt64Field(value: self.groupID, fieldNumber: 1)
    }
    if self.groupVersion != 0 {
      try visitor.visitSingularUInt32Field(value: self.groupVersion, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Group_CIMGroupVersionInfo, rhs: CIM_Group_CIMGroupVersionInfo) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.groupVersion != rhs.groupVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
