// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: CIM.Message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 发送消息
struct CIM_Message_CIMMsgData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id:		0x0301
  var fromUserID: UInt64 = 0

  /// 消息发送方昵称
  var fromNickName: String = String()

  /// 消息接受方，单聊用户ID，群聊群ID
  var toSessionID: UInt64 = 0

  /// 客户端消息ID，唯一（UUID）
  var clientMsgID: String = String()

  /// 服务端生成的消息ID，顺序（客户端发送时无需设置）
  var serverMsgID: UInt64 = 0

  /// 消息创建时间戳(秒)
  var createTime: Int32 = 0

  /// 消息类型
  var msgType: CIM_Def_CIMMsgType = .kCimMsgTypeUnknown

  /// 会话类型
  var sessionType: CIM_Def_CIMSessionType = .kCimSessionTypeInvalid

  /// 消息内容
  var msgData: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 消息收到回复
struct CIM_Message_CIMMsgDataAck {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id:		0x0302
  var fromUserID: UInt64 = 0

  /// 消息接受方，单聊用户ID，群聊群ID
  var toSessionID: UInt64 = 0

  /// 客户端消息ID，唯一（UUID）
  var clientMsgID: String = String()

  /// 服务端生成的消息ID，顺序
  var serverMsgID: UInt64 = 0

  /// 错误码
  var resCode: CIM_Def_CIMResCode = .kCimResCodeUnknown

  /// 会话类型
  var sessionType: CIM_Def_CIMSessionType = .kCimSessionTypeInvalid

  ///optional
  var createTime: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 消息已读回复（我方）
struct CIM_Message_CIMMsgDataReadAck {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id:		0x0303
  var userID: UInt64 = 0

  var sessionID: UInt64 = 0

  /// 服务器消息ID，在该ID之前的所有消息被标记为已读
  var msgID: UInt64 = 0

  var sessionType: CIM_Def_CIMSessionType = .kCimSessionTypeInvalid

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 已读消息通知（对方）
struct CIM_Message_CIMMsgDataReadNotify {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id:		0x0304
  var userID: UInt64 = 0

  var sessionID: UInt64 = 0

  /// 服务器消息ID，在该ID之前的所有消息需要被标记为已读
  var msgID: UInt64 = 0

  var sessionType: CIM_Def_CIMSessionType = .kCimSessionTypeInvalid

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 某个会话最新的消息ID请求
struct CIM_Message_CIMGetLatestMsgIdReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id: 		0x030b
  var userID: UInt64 = 0

  var sessionType: CIM_Def_CIMSessionType = .kCimSessionTypeInvalid

  var sessionID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CIM_Message_CIMGetLatestMsgIdRsp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id:		0x030c
  var userID: UInt64 = 0

  var sessionType: CIM_Def_CIMSessionType = .kCimSessionTypeInvalid

  var sessionID: UInt64 = 0

  /// 会话最新的消息ID（UUID）
  var latestMsgID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 批量查询消息详情请求(20条内)
struct CIM_Message_CIMGetMsgByIdReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id: 		0x030d
  var userID: UInt64 = 0

  var sessionType: CIM_Def_CIMSessionType = .kCimSessionTypeInvalid

  var sessionID: UInt64 = 0

  /// 要查询消息详情的ID列表
  var msgIDList: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CIM_Message_CIMGetMsgByIdRsp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// cmd id:		0x030e
  var userID: UInt64 = 0

  var sessionType: CIM_Def_CIMSessionType = .kCimSessionTypeInvalid

  var sessionID: UInt64 = 0

  /// 消息详情列表
  var msgList: [CIM_Def_CIMMsgInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "CIM.Message"

extension CIM_Message_CIMMsgData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMMsgData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "from_user_id"),
    2: .standard(proto: "from_nick_name"),
    3: .standard(proto: "to_session_id"),
    4: .standard(proto: "client_msg_id"),
    5: .standard(proto: "server_msg_id"),
    6: .standard(proto: "create_time"),
    7: .standard(proto: "msg_type"),
    8: .standard(proto: "session_type"),
    9: .standard(proto: "msg_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.fromUserID)
      case 2: try decoder.decodeSingularStringField(value: &self.fromNickName)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.toSessionID)
      case 4: try decoder.decodeSingularStringField(value: &self.clientMsgID)
      case 5: try decoder.decodeSingularUInt64Field(value: &self.serverMsgID)
      case 6: try decoder.decodeSingularInt32Field(value: &self.createTime)
      case 7: try decoder.decodeSingularEnumField(value: &self.msgType)
      case 8: try decoder.decodeSingularEnumField(value: &self.sessionType)
      case 9: try decoder.decodeSingularBytesField(value: &self.msgData)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.fromUserID != 0 {
      try visitor.visitSingularUInt64Field(value: self.fromUserID, fieldNumber: 1)
    }
    if !self.fromNickName.isEmpty {
      try visitor.visitSingularStringField(value: self.fromNickName, fieldNumber: 2)
    }
    if self.toSessionID != 0 {
      try visitor.visitSingularUInt64Field(value: self.toSessionID, fieldNumber: 3)
    }
    if !self.clientMsgID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientMsgID, fieldNumber: 4)
    }
    if self.serverMsgID != 0 {
      try visitor.visitSingularUInt64Field(value: self.serverMsgID, fieldNumber: 5)
    }
    if self.createTime != 0 {
      try visitor.visitSingularInt32Field(value: self.createTime, fieldNumber: 6)
    }
    if self.msgType != .kCimMsgTypeUnknown {
      try visitor.visitSingularEnumField(value: self.msgType, fieldNumber: 7)
    }
    if self.sessionType != .kCimSessionTypeInvalid {
      try visitor.visitSingularEnumField(value: self.sessionType, fieldNumber: 8)
    }
    if !self.msgData.isEmpty {
      try visitor.visitSingularBytesField(value: self.msgData, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Message_CIMMsgData, rhs: CIM_Message_CIMMsgData) -> Bool {
    if lhs.fromUserID != rhs.fromUserID {return false}
    if lhs.fromNickName != rhs.fromNickName {return false}
    if lhs.toSessionID != rhs.toSessionID {return false}
    if lhs.clientMsgID != rhs.clientMsgID {return false}
    if lhs.serverMsgID != rhs.serverMsgID {return false}
    if lhs.createTime != rhs.createTime {return false}
    if lhs.msgType != rhs.msgType {return false}
    if lhs.sessionType != rhs.sessionType {return false}
    if lhs.msgData != rhs.msgData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Message_CIMMsgDataAck: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMMsgDataAck"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "from_user_id"),
    2: .standard(proto: "to_session_id"),
    3: .standard(proto: "client_msg_id"),
    4: .standard(proto: "server_msg_id"),
    5: .standard(proto: "res_code"),
    6: .standard(proto: "session_type"),
    7: .standard(proto: "create_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.fromUserID)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.toSessionID)
      case 3: try decoder.decodeSingularStringField(value: &self.clientMsgID)
      case 4: try decoder.decodeSingularUInt64Field(value: &self.serverMsgID)
      case 5: try decoder.decodeSingularEnumField(value: &self.resCode)
      case 6: try decoder.decodeSingularEnumField(value: &self.sessionType)
      case 7: try decoder.decodeSingularInt32Field(value: &self.createTime)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.fromUserID != 0 {
      try visitor.visitSingularUInt64Field(value: self.fromUserID, fieldNumber: 1)
    }
    if self.toSessionID != 0 {
      try visitor.visitSingularUInt64Field(value: self.toSessionID, fieldNumber: 2)
    }
    if !self.clientMsgID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientMsgID, fieldNumber: 3)
    }
    if self.serverMsgID != 0 {
      try visitor.visitSingularUInt64Field(value: self.serverMsgID, fieldNumber: 4)
    }
    if self.resCode != .kCimResCodeUnknown {
      try visitor.visitSingularEnumField(value: self.resCode, fieldNumber: 5)
    }
    if self.sessionType != .kCimSessionTypeInvalid {
      try visitor.visitSingularEnumField(value: self.sessionType, fieldNumber: 6)
    }
    if self.createTime != 0 {
      try visitor.visitSingularInt32Field(value: self.createTime, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Message_CIMMsgDataAck, rhs: CIM_Message_CIMMsgDataAck) -> Bool {
    if lhs.fromUserID != rhs.fromUserID {return false}
    if lhs.toSessionID != rhs.toSessionID {return false}
    if lhs.clientMsgID != rhs.clientMsgID {return false}
    if lhs.serverMsgID != rhs.serverMsgID {return false}
    if lhs.resCode != rhs.resCode {return false}
    if lhs.sessionType != rhs.sessionType {return false}
    if lhs.createTime != rhs.createTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Message_CIMMsgDataReadAck: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMMsgDataReadAck"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "session_id"),
    3: .standard(proto: "msg_id"),
    4: .standard(proto: "session_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.sessionID)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.msgID)
      case 4: try decoder.decodeSingularEnumField(value: &self.sessionType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if self.sessionID != 0 {
      try visitor.visitSingularUInt64Field(value: self.sessionID, fieldNumber: 2)
    }
    if self.msgID != 0 {
      try visitor.visitSingularUInt64Field(value: self.msgID, fieldNumber: 3)
    }
    if self.sessionType != .kCimSessionTypeInvalid {
      try visitor.visitSingularEnumField(value: self.sessionType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Message_CIMMsgDataReadAck, rhs: CIM_Message_CIMMsgDataReadAck) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.msgID != rhs.msgID {return false}
    if lhs.sessionType != rhs.sessionType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Message_CIMMsgDataReadNotify: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMMsgDataReadNotify"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "session_id"),
    3: .standard(proto: "msg_id"),
    4: .standard(proto: "session_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.sessionID)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.msgID)
      case 4: try decoder.decodeSingularEnumField(value: &self.sessionType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if self.sessionID != 0 {
      try visitor.visitSingularUInt64Field(value: self.sessionID, fieldNumber: 2)
    }
    if self.msgID != 0 {
      try visitor.visitSingularUInt64Field(value: self.msgID, fieldNumber: 3)
    }
    if self.sessionType != .kCimSessionTypeInvalid {
      try visitor.visitSingularEnumField(value: self.sessionType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Message_CIMMsgDataReadNotify, rhs: CIM_Message_CIMMsgDataReadNotify) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.msgID != rhs.msgID {return false}
    if lhs.sessionType != rhs.sessionType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Message_CIMGetLatestMsgIdReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMGetLatestMsgIdReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "session_type"),
    3: .standard(proto: "session_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeSingularEnumField(value: &self.sessionType)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.sessionID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if self.sessionType != .kCimSessionTypeInvalid {
      try visitor.visitSingularEnumField(value: self.sessionType, fieldNumber: 2)
    }
    if self.sessionID != 0 {
      try visitor.visitSingularUInt64Field(value: self.sessionID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Message_CIMGetLatestMsgIdReq, rhs: CIM_Message_CIMGetLatestMsgIdReq) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.sessionType != rhs.sessionType {return false}
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Message_CIMGetLatestMsgIdRsp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMGetLatestMsgIdRsp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "session_type"),
    3: .standard(proto: "session_id"),
    4: .standard(proto: "latest_msg_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeSingularEnumField(value: &self.sessionType)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.sessionID)
      case 4: try decoder.decodeSingularStringField(value: &self.latestMsgID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if self.sessionType != .kCimSessionTypeInvalid {
      try visitor.visitSingularEnumField(value: self.sessionType, fieldNumber: 2)
    }
    if self.sessionID != 0 {
      try visitor.visitSingularUInt64Field(value: self.sessionID, fieldNumber: 3)
    }
    if !self.latestMsgID.isEmpty {
      try visitor.visitSingularStringField(value: self.latestMsgID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Message_CIMGetLatestMsgIdRsp, rhs: CIM_Message_CIMGetLatestMsgIdRsp) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.sessionType != rhs.sessionType {return false}
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.latestMsgID != rhs.latestMsgID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Message_CIMGetMsgByIdReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMGetMsgByIdReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "session_type"),
    3: .standard(proto: "session_id"),
    4: .standard(proto: "msg_id_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeSingularEnumField(value: &self.sessionType)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.sessionID)
      case 4: try decoder.decodeRepeatedStringField(value: &self.msgIDList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if self.sessionType != .kCimSessionTypeInvalid {
      try visitor.visitSingularEnumField(value: self.sessionType, fieldNumber: 2)
    }
    if self.sessionID != 0 {
      try visitor.visitSingularUInt64Field(value: self.sessionID, fieldNumber: 3)
    }
    if !self.msgIDList.isEmpty {
      try visitor.visitRepeatedStringField(value: self.msgIDList, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Message_CIMGetMsgByIdReq, rhs: CIM_Message_CIMGetMsgByIdReq) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.sessionType != rhs.sessionType {return false}
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.msgIDList != rhs.msgIDList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CIM_Message_CIMGetMsgByIdRsp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CIMGetMsgByIdRsp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "session_type"),
    3: .standard(proto: "session_id"),
    4: .standard(proto: "msg_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.userID)
      case 2: try decoder.decodeSingularEnumField(value: &self.sessionType)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.sessionID)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.msgList)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    if self.sessionType != .kCimSessionTypeInvalid {
      try visitor.visitSingularEnumField(value: self.sessionType, fieldNumber: 2)
    }
    if self.sessionID != 0 {
      try visitor.visitSingularUInt64Field(value: self.sessionID, fieldNumber: 3)
    }
    if !self.msgList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.msgList, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CIM_Message_CIMGetMsgByIdRsp, rhs: CIM_Message_CIMGetMsgByIdRsp) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.sessionType != rhs.sessionType {return false}
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.msgList != rhs.msgList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
